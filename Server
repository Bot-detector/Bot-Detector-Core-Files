import re
import time
from types import SimpleNamespace
import mysql.connector
import numpy as np
import requests
from flask import Flask
from flask import request, abort

line_seen = set()
response = 0
check = 0
ip_timelog = []
ip_ban_list = []
ip_whitelist = [('127.0.0.1')]
ipr = []
PLAYER_NAME = []
returned_data = []
newplayername = []
newplayerskills = []
DATAarray = []
userfixed = ""
osrsknn_predict = -1

tempnames = list()
tempgroups = []
tempind = 0

MAIN = "http://services.runescape.com/m=hiscore_oldschool/index_lite.ws?player="

mydb = mysql.connector.connect(
    host="",
    user="",
    password="",
    database=""
)

mycursor = mydb.cursor()

##################################################################################################

app = Flask(__name__)


@app.before_request
def block_method(r=0):
    ip = request.environ.get('REMOTE_ADDR')
    if ip in ipr:
        r = ipr.index(ip)
        check = 1
    else:
        ip_timelog.append([ip, time.time()])
        check = 0
        ipr.append(ip)

    last_time = ip_timelog[r][1]
    response = time.time() - last_time
    ip_timelog[r][1] = time.time()

    if check == 1:
        if response < 1:
            if ip not in ip_whitelist:
                if ip in ip_ban_list:
                    abort(403)
                else:
                    ip_ban_list.append(ip)
                    abort(403)
        else:
            if ip not in ip_whitelist:
                if ip in ip_ban_list:
                    abort(403)
    print("Response Time: ", response)
    print("Timelog: ", ip_timelog)
    print("IP REC: ", ipr)
    print("Banlist: ", ip_ban_list)
    print("Whitelist: ", ip_whitelist)
    return


@app.route('/', methods=['POST'])
def post():
    if request.method == 'POST':
        print(request.data)
        datastr = str(request.data)
        dataclean = datastr[1:].replace('\\r', '').strip("'[]").replace(', ', '\n')
        with open("INPUT.txt", "wt") as SERVERDATARAW:
            SERVERDATARAW.write(dataclean)
        SERVERDATARAW.close()
        SERVERDATARAW = open("TempINPUT.txt", "rt")
        with open("PLAYERGATHERDATA2.txt", "a") as SERVERDATA:
            for line in SERVERDATARAW:
                if len(line) < 13:
                    L = re.findall('[a-zA-Z0-9_-] *', line)
                    line = ''.join(map(str, L))
                    if line not in line_seen:
                        SERVERDATA.write(line + '\n')
                        line_seen.add(line)
    return


@app.route('/user/<user>', methods=['GET'])
def get(user):
    global myresult
    userfixed = user.replace(' ', '_')
    print(userfixed)
    mycursor = mydb.cursor()
    name = '"' + userfixed + '"'
    mycursor.execute("SELECT * FROM Players WHERE name =(%s)" % name)
    myresult = mycursor.fetchall()
    mydb.commit()
    if len(myresult) > 0:
        print(myresult)
        return myresult
    else:
        try:
            print("User not found. Currently evaluating user...")
            pullData(userfixed)
        except:
            print("pullData ERROR")
        try:
            print("Adding Name to Server...")
            addName(name)
        except:
            print("addName ERROR")
        try:
            print("Sending to Server...")
            #sendToServer(DATAarray)
        except:
            print("sendToServer ERROR")
    return


def pullData(userfixed):
    url = MAIN + userfixed
    response = requests.get(url)
    data = response.text
    try:
        if data.find('404 - Page not found') != -1:
            osrsknn_predict = -1
        else:
            r = str.split(data)
            DATAarray = [[float(n) for n in row.split(",")] for row in r]
            print(DATAarray)
            sendToServer(DATAarray)
    except:
        return


def addName(name):
    sql = "INSERT INTO Players (name) VALUES (%s)" % name
    mycursor.execute(sql)
    mydb.commit()
    return


def sendToServer(DATAarray):
    info_temp = {}
    info_dict = {'total': 0, 'attack': 0, 'defence': 0, 'strength': 0, 'hitpoints': 0, 'ranged': 0, 'prayer': 0,
                 'magic': 0, 'cooking': 0, 'woodcutting': 0, 'fletching': 0, 'fishing': 0, 'firemaking': 0,
                 'crafting': 0, 'smithing': 0, 'mining': 0, 'herblore': 0, 'agility': 0, 'thieving': 0, 'slayer': 0,
                 'farming': 0, 'runecraft': 0, 'hunter': 0, 'construction': 0, 'league': 0, 'bounty_hunter_hunter': 0,
                 'bounty_hunter_rogue': 0, 'cs_all': 0, 'cs_beginner': 0, 'cs_easy': 0, 'cs_medium': 0, 'cs_hard': 0,
                 'cs_elite': 0, 'cs_master': 0, 'lms_rank': 0, 'soul_wars_zeal': 0, 'abyssal_sire': 0,
                 'alchemical_hydra': 0, 'barrows_chests': 0, 'bryophyta': 0, 'callisto': 0, 'cerberus': 0,
                 'chambers_of_xeric': 0, 'chambers_of_xeric_challenge_mode': 0, 'chaos_elemental': 0,
                 'chaos_fanatic': 0, 'commander_zilyana': 0, 'corporeal_beast': 0, 'crazy_archaeologist': 0,
                 'dagannoth_prime': 0, 'dagannoth_rex': 0, 'dagannoth_supreme': 0, 'deranged_archaeologist': 0,
                 'general_graardor': 0, 'giant_mole': 0, 'grotesque_guardians': 0, 'hespori': 0, 'kalphite_queen': 0,
                 'king_black_dragon': 0, 'kraken': 0, 'kreearra': 0, 'kril_tsutsaroth': 0, 'mimic': 0, 'nightmare': 0,
                 'obor': 0, 'sarachnis': 0, 'scorpia': 0, 'skotizo': 0, 'the_gauntlet': 0, 'the_corrupted_gauntlet': 0,
                 'theatre_of_blood': 0, 'thermonuclear_smoke_devil': 0, 'tzkal_zuk': 0, 'tztok_jad': 0, 'venenatis': 0,
                 'vetion': 0, 'vorkath': 0, 'wintertodt': 0, 'zalcano': 0, 'zulrah': 0}
    for x in range(0,80):
        if x < 24:
            info_temp[x] = int(DATAarray[x][2])
        if 23 < x < 80:
            info_temp[x] = int(DATAarray[x][1])
    new_dict = {}

    for k, v in zip(info_dict.items(), info_temp.items()):
        new_dict[k[0]] = v[1]
    print(new_dict)

    n = SimpleNamespace(**new_dict)
    mycursor = mydb.cursor()
    Player_id = 13000
    sql = "INSERT INTO playerHiscoreData (Player_id, total, attack, defence, strength, hitpoints, ranged, prayer, " \
          "magic, cooking, woodcutting, fletching, fishing, firemaking, crafting, smithing, mining, herblore, " \
          "agility, thieving, slayer, farming, runecraft, hunter, construction, league, bounty_hunter_hunter, " \
          "bounty_hunter_rogue, cs_all, cs_beginner, cs_easy, cs_medium, cs_hard, cs_elite, cs_master, lms_rank, " \
          "soul_wars_zeal, abyssal_sire, alchemical_hydra, barrows_chests, bryophyta, callisto, cerberus, " \
          "chambers_of_xeric, chambers_of_xeric_challenge_mode, chaos_elemental, chaos_fanatic, commander_zilyana, " \
          "corporeal_beast, crazy_archaeologist, dagannoth_prime, dagannoth_rex, dagannoth_supreme, " \
          "deranged_archaeologist, general_graardor, giant_mole, grotesque_guardians, hespori, kalphite_queen, " \
          "king_black_dragon, kraken, kreearra, kril_tsutsaroth, mimic, nightmare, obor, sarachnis, scorpia, skotizo, " \
          "the_gauntlet, the_corrupted_gauntlet, theatre_of_blood, thermonuclear_smoke_devil, tzkal_zuk, tztok_jad, " \
          "venenatis, vetion, vorkath, wintertodt, zalcano, zulrah) VALUES (%i, %i, %i, %i, %i, %i, %i, %i, %i, %i, " \
          "%i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, " \
          "%i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, " \
          "%i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i, %i)" % (
              Player_id, n.total, n.attack, n.defence, n.strength, n.hitpoints, n.ranged, n.prayer, n.magic, n.cooking,
              n.woodcutting, n.fletching, n.fishing, n.firemaking, n.crafting, n.smithing, n.mining, n.herblore,
              n.agility,
              n.thieving, n.slayer, n.farming, n.runecraft, n.hunter, n.construction, n.league, n.bounty_hunter_hunter,
              n.bounty_hunter_rogue, n.cs_all, n.cs_beginner, n.cs_easy, n.cs_medium, n.cs_hard, n.cs_elite,
              n.cs_master,
              n.lms_rank, n.soul_wars_zeal, n.abyssal_sire, n.alchemical_hydra, n.barrows_chests, n.bryophyta,
              n.callisto,
              n.cerberus, n.chambers_of_xeric, n.chambers_of_xeric_challenge_mode, n.chaos_elemental, n.chaos_fanatic,
              n.commander_zilyana, n.corporeal_beast, n.crazy_archaeologist, n.dagannoth_prime, n.dagannoth_rex,
              n.dagannoth_supreme, n.deranged_archaeologist, n.general_graardor, n.giant_mole, n.grotesque_guardians,
              n.hespori,
              n.kalphite_queen, n.king_black_dragon, n.kraken, n.kreearra, n.kril_tsutsaroth, n.mimic, n.nightmare,
              n.obor,
              n.sarachnis, n.scorpia, n.skotizo, n.the_gauntlet, n.the_corrupted_gauntlet, n.theatre_of_blood,
              n.thermonuclear_smoke_devil, n.tzkal_zuk, n.tztok_jad, n.venenatis, n.vetion, n.vorkath, n.wintertodt,
              n.zalcano,
              n.zulrah)
    mycursor.execute(sql)
    mydb.commit()
    print("Added Data To Server")
    return

if __name__ == '__main__':
    app.run(port="8000")
